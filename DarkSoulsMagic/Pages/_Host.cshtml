@page "/"
@namespace DarkSoulsMagic.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DarkSoulsMagic</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="css/cardtooltip.css" rel="stylesheet" />
</head>
<body>
    <app>
        <component type="typeof(App)" render-mode="Server" />
    </app>

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script>
        var tooltips;

        window.onmousemove = function (e) {
            tooltips = document.querySelectorAll('.my-tooltip .hover-image');

            var x;
            var y;
            if ((e.clientY + 260) > window.innerHeight) {
                x = (e.clientX + -10) + 'px';
                y = (e.clientY - 540) + 'px';
            }
            else if ((e.clientY - 260) < 0) {
                x = (e.clientX + -10) + 'px';
                y = (e.clientY + 20) + 'px';
            }
            else {
                x = (e.clientX + 80) + 'px';
                y = (e.clientY - 260) + 'px';
            }
            for (var i = 0; i < tooltips.length; i++) {
                tooltips[i].style.top = y;
                tooltips[i].style.left = x;
            }
        };

        @*if (
            "IntersectionObserver" in window &&
            "IntersectionObserverEntry" in window &&
            "intersectionRatio" in window.IntersectionObserverEntry.prototype
        ) {
            let observer = new IntersectionObserver(entries => {
                if (entries[0].boundingClientRect.y < 0) {
                    document.body.classList.add("header-not-at-top");
                } else {
                    document.body.classList.remove("header-not-at-top");
                }
            });
            observer.observe(document.querySelector("#top-of-site-pixel-anchor"));
            console.log("Choosing intersection observer");
        }*@
        document.addEventListener('scroll', function (e) {
            last_known_scroll_position = window.scrollY;

            if (last_known_scroll_position > document.querySelector("#top-of-site-pixel-anchor").offsetTop) {
                document.body.classList.add("header-not-at-top");
            }
            else {
                document.body.classList.remove("header-not-at-top");
            }
        });

        window.clipboardCopy = {
            copyText: function (text) {
                navigator.clipboard.writeText(text)
                    .catch(function (error) {
                        alert(error);
                    });
            }
        }
    </script>
</body>
</html>

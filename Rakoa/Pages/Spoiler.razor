@page "/Spoiler"

@using System.Security.Cryptography;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.IO;
@using MagicSite;

@inject Services.MagicSiteServices.CardDatabase CardDatabase
@inject Services.MagicSiteServices.WebsiteConfig config

@if (config.info.spoilerPage)
{
    @if (spoilers == null)
    {
        <p class="loading-bar">@config.info.loadingText</p>
    }
    else
    {
        @if (spoilers.Length > 1)
        {
            <div class="page-tab-selector">
                @for (int i = 0; i < spoilers.Length; i++)
                {
                    int iLock = i;
                    <button class="@(selectedIndex == i ? "active" : "")" @onclick="@(e => selectedIndex = iLock)">
                        @spoilers[iLock].spoilerName
                    </button>
                }
            </div>
        }

        @if (spoilers[selectedIndex].spoilerName != null)
        {
            <h2>@spoilers[selectedIndex].spoilerName</h2>

        }

        @if (spoilers[selectedIndex].spoilerDescription != null)
        {
            <p class="spoiler-subtitle">
                @spoilers[selectedIndex].spoilerDescription
            </p>
        }

        <div class="spoiler-inputs content-box">
            <div class="non-advanced-inputs">
                <div id="spoiler-inputs-display" class="spoiler-inputs-box">
                    <h3>Display Options</h3>
                    <button class="button @(fullInfo ? "active" : "")" @onclick="@(e => fullInfo = true)">Text and Images</button>
                    <button class="button @(fullInfo ? "" : "active")" @onclick="@(e => fullInfo = false)">Images Only</button>
                </div>

                <div class="spoiler-inputs-box">
                    <h3>Sorting Options</h3>
                    <div class="spoiler-inputs-section">
                        @foreach (SortingOption option in Enum.GetValues(typeof(SortingOption)).Cast<SortingOption>())
                        {
                            <input name="sort" type="radio" id="sort-@option.ToString()" checked="@(sortSelection == option)" @onchange="@(() => sortSelection = option)" />
                            <label for="sort-@option.ToString()">@(option.ToString().Substring(0, 1) + option.ToString().Substring(1).ToLower())</label>
                        }
                        @if (sortSelection == SortingOption.SEEDED)
                        {
                            <br />
                            <label for="seed-input">Randomness Seed</label>
                            <input id="seed-input" @bind="@randomSeed" />
                        }
                    </div>
                </div>

                <p id="advanced-options-button" @onclick="@(e => displayAdvanced = !displayAdvanced)">Advanced Filters</p>
            </div>

            <div class="spoiler-inputs-box advanced-filters-flex" style="@(displayAdvanced ? "display: flex;" : "display: none;")">
                <div>
                    <div class="spoiler-inputs-section">
                        <label for="name">Name</label>
                        <br />
                        <input id="name" @bind="@nameFilterText" @bind:event="oninput">
                    </div>

                    <div class="spoiler-inputs-section">
                        <label for="text">Typeline</label>
                        <br />
                        <input id="text" @bind="typelineFilterText" @bind:event="oninput">
                    </div>

                    <div class="spoiler-inputs-section">
                        <label for="text">Rules Text</label>
                        <br />
                        <input id="text" @bind="@rulesTextFilterText" @bind:event="oninput">
                    </div>

                    <div class="spoiler-inputs-section">
                        <label for="flavor-text">Flavor Text</label>
                        <br />
                        <input id="flavor-text" @bind="@flavorTextFilterText" @bind:event="oninput">
                    </div>


                    <div class="spoiler-inputs-section spoiler-inputs-stats">
                        <div>
                            <label for="cmc">CMC</label>
                            <br />
                            <input class="short-input" id="cmc" @bind="@cmcFilterString" @bind:event="oninput">
                        </div>

                        <div>
                            <label for="power">Power</label>
                            <br />
                            <input class="short-input" id="power" @bind="@powerFilterString" @bind:event="oninput">
                        </div>

                        <div>
                            <label for="toughness">Toughness</label>
                            <br />
                            <input class="short-input" id="toughness" @bind="@toughnessFilterString" @bind:event="oninput">
                        </div>
                    </div>
                </div>

                <div class="spoiler-inputs-section">
                    <label>Colors</label>
                    <br />
                    @for (int i = 0; i < Color.Colors.Length; i++)
                    {
                        Color color = Color.Colors[i];
                        int iLock = i;
                        <input type="checkbox" id="color-@iLock" @bind="@colorValues[iLock]" />
                        <label for="color-@iLock"><img style="width: 16px;" src="@($"mana_symbols/mana_{color.code}.png")" /> @color.name</label>
                        <br />
                    }
                    <input type="checkbox" id="multicolor" @bind="@multicolorValue" />
                    <label for="multicolor"><img style="width: 16px;" src="@("mana_symbols/M.svg")" /> Multicolor</label>
                    <br />
                    <input type="checkbox" id="colorless" @bind="@colorlessValue" />
                    <label for="colorless"><img style="width: 16px;" src="@("mana_symbols/mana_c.png")" /> Colorless</label>
                </div>

                <div class="spoiler-inputs-section" id="rarity">
                    <label>Rarity</label>
                    <br />
                    <input name="rarity-radio" type="radio" id="rarity-no" checked="@(raritySelection == null)" @onchange="@(() => raritySelection = null)" />
                    <label for="rarity-no">No Selection</label>
                    <br />
                    @for (int i = 0; i < Rarity.Rarities.Length; i++)
                    {
                        Rarity rarity = Rarity.Rarities[i];
                        int iLock = i;
                        <input name="rarity-radio" type="radio" id="rarity-@iLock" checked="@(raritySelection == rarity)" @onchange="@(() => raritySelection = rarity)" />
                        <label for="rarity-@iLock"> <img style="width: 16px;" src="@($"rarity_symbols/rarity_{rarity.code}.png")" />@rarity.name</label>
                        <br />
                    }
                    <input name="rarity-radio" type="radio" id="rarity-less" checked="@(raritySelection == Rarity.noRarity)" @onchange="@(() => raritySelection = Rarity.noRarity)" />
                    <label for="rarity-less">Rarityless</label>
                </div>
            </div>
        </div>

        <button class="move-to-top" type="button" onclick="document.getElementById('top-of-page').scrollIntoView({behavior:'smooth'})">
            To Top
        </button>

        <div id="top-of-site-pixel-anchor"></div>

        <SpoilerHolder cards="@sortedFilteredCards" holderClass="cards_spoiler space-between" fullInfo="@fullInfo" />
    }

    @code
{
        private SpoilerInfo[] spoilers;

        private int selectedIndex = 0;

        private bool fullInfo = true;

        private string seed;
        private Random rand;
        private string randomSeed
        {
            get
            {
                return seed;
            }

            set
            {
                seed = value;
                using (SHA1 algo = SHA1.Create())
                {
                    byte[] bytes = System.Text.Encoding.UTF8.GetBytes(seed);
                    int seedValue = BitConverter.ToInt32(algo.ComputeHash(bytes));
                    rand = new Random(seedValue);

                    randomAssociation = new Dictionary<string, int>();
                    for (int i = 0; i < CardDatabase.Cards["RAK"].Count; i++)
                    {
                        randomAssociation.Add(CardDatabase.Cards["RAK"][i].name, rand.Next());
                    }
                }
            }
        }

        private Dictionary<string, int> randomAssociation;

        private string nameFilterText;
        private string typelineFilterText;
        private string rulesTextFilterText;
        private string flavorTextFilterText;

        public enum IntFilterType
        {
            DISABLED,
            EQUALS,
            GREATER,
            LESS
        }

        private bool cmcEnabled;
        private int cmcFilter;
        private string cmcFilterString
        {
            get
            {
                return !cmcEnabled ? "" : cmcFilter.ToString();
            }

            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    cmcEnabled = false;
                    cmcFilter = 0;
                }
                else if (value.All(char.IsDigit) && value.Length <= 2)
                {
                    int parse = int.Parse(value);

                    if (parse <= 15)
                    {
                        cmcEnabled = true;
                        cmcFilter = parse;
                    }
                }
            }
        }

        private int powerFilter;
        private bool powerEnabled;
        private string powerFilterString
        {
            get
            {
                return !powerEnabled ? "" : powerFilter.ToString();
            }

            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    powerEnabled = false;
                    powerFilter = 0;
                }
                else if (value.All(char.IsDigit) && value.Length <= 2)
                {
                    int parse = int.Parse(value);

                    if (parse <= 15)
                    {
                        powerEnabled = true;
                        powerFilter = parse;
                    }
                }
            }
        }

        private int toughnessFilter;
        private bool toughnessEnabled;
        private string toughnessFilterString
        {
            get
            {
                return !toughnessEnabled ? "" : toughnessFilter.ToString();
            }

            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    toughnessEnabled = false;
                    toughnessFilter = 0;
                }
                else if (value.All(char.IsDigit) && value.Length <= 2)
                {
                    int parse = int.Parse(value);

                    if (parse <= 15)
                    {
                        toughnessEnabled = true;
                        toughnessFilter = parse;
                    }
                }
            }
        }

        private bool[] colorValues;

        private bool multicolor;
        private bool multicolorValue
        {
            get
            {
                for (int i = 0; i < colorValues.Length; i++)
                {
                    if (colorValues[i])
                    {
                        multicolor = false;
                    }
                }
                if (colorless)
                {
                    multicolor = false;
                }

                return multicolor;
            }

            set
            {
                multicolor = value;

                if (value)
                {
                    for (int i = 0; i < colorValues.Length; i++)
                    {
                        colorValues[i] = false;
                    }
                    colorless = false;
                }
            }
        }

        private bool colorless;
        private bool colorlessValue
        {
            get
            {
                for (int i = 0; i < colorValues.Length; i++)
                {
                    if (colorValues[i])
                    {
                        colorless = false;
                    }
                }
                if (multicolor)
                {
                    colorless = false;
                }

                return colorless;
            }

            set
            {
                colorless = value;

                if (value)
                {
                    for (int i = 0; i < colorValues.Length; i++)
                    {
                        colorValues[i] = false;
                    }
                    multicolor = false;
                }
            }
        }

        private Rarity raritySelection;

        private SortingOption sortSelection = SortingOption.COLOR;

        private bool displayAdvanced;

        protected override async Task OnInitializedAsync()
        {
            using (FileStream fs = File.OpenRead("wwwroot/website_info/spoilers.json"))
            {
                spoilers = await JsonSerializer.DeserializeAsync<SpoilerInfo[]>(fs);
            }

            colorValues = new bool[Color.Colors.Length];

            randomSeed = "RANDOM";

            await base.OnInitializedAsync();
        }

        private List<Card> sortedFilteredCards
        {
            get
            {
                IEnumerable<Card> filtered = CardDatabase.Cards[spoilers[selectedIndex].spoilerXMLName].Where(card => filteredOrNot(card));
                switch (sortSelection)
                {
                    case SortingOption.COLOR:
                        filtered = filtered.OrderBy(card => card.cardNumber);
                        break;
                    case SortingOption.RARITY:
                        filtered = filtered.OrderByDescending(card => card.rarity.index).ThenBy(card => card.cardNumber);
                        break;
                    case SortingOption.CMC:
                        filtered = filtered.OrderBy(card => card.convertedManaCost).ThenBy(card => card.cardNumber);
                        break;
                    case SortingOption.NAME:
                        filtered = filtered.OrderBy(card => card.name).ThenBy(card => card.cardNumber);
                        break;
                        break;
                    case SortingOption.SEEDED:
                        filtered = filtered.OrderBy(card => randomAssociation[card.name]);
                        break;
                }
                return filtered.ToList();
            }
        }

        private int SortCards(Card a, Card b)
        {
            return 1;
        }

        private bool filteredOrNot(Card card)
        {
            //Don't do any advanced filtering if the user has toggled that off
            if (!displayAdvanced)
                return true;

            bool passesNameFilter = String.IsNullOrEmpty(nameFilterText) || card.name.ToLower().Contains(nameFilterText.ToLower());
            bool passesTypelineFilter = String.IsNullOrEmpty(typelineFilterText) || card.typeLine.ToLower().Contains(typelineFilterText.ToLower());
            bool passesRulesTextFilter = String.IsNullOrEmpty(rulesTextFilterText) || card.text.ToLower().Contains(rulesTextFilterText.ToLower());
            bool passesFlavorTextFilter = String.IsNullOrEmpty(flavorTextFilterText) || card.flavorText.ToLower().Contains(flavorTextFilterText.ToLower());
            bool passedCMCFilter = !cmcEnabled || card.convertedManaCost == cmcFilter;
            bool passesPowerFilter = !powerEnabled || (card.typeLine.ToLower().Contains("creature") && card.power == powerFilter);
            bool passesToughnessFilter = !toughnessEnabled || (card.typeLine.ToLower().Contains("creature") && card.toughness == toughnessFilter);

            bool passesColorFilter = true;
            for (int i = 0; i < Color.Colors.Length; i++)
            {
                if (!colorValues[i])
                {
                    continue;
                }

                if (!card.colors.Contains(Color.Colors[i]))
                {
                    passesColorFilter = false;
                }
            }

            //colorless
            if (colorless && card.colors.Length > 0)
            {
                passesColorFilter = false;
            }
            else if (multicolor && card.colors.Length < 2)
            {
                passesColorFilter = false;
            }

            //rarity
            bool passesRarityFilter = raritySelection == null || card.rarity == raritySelection;

            return passesNameFilter && passesTypelineFilter && passesRulesTextFilter && passesFlavorTextFilter
                && passedCMCFilter && passesPowerFilter && passesToughnessFilter && passesColorFilter && passesRarityFilter;
        }

        private enum SortingOption
        {
            COLOR, RARITY, CMC, NAME, SEEDED
        }
    }
}